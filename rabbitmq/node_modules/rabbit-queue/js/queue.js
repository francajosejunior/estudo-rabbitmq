"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid = require("uuid");
const reply_queue_1 = require("./reply-queue");
const race_until_1 = require("race-until");
const stream_1 = require("stream");
const encode_decode_1 = require("./encode-decode");
const logger_1 = require("./logger");
const logger = logger_1.default('rabbit-queue');
class Queue {
    constructor(channel, name, options) {
        this.channel = channel;
        this.name = name;
        this.defaultOptions = {
            durable: true,
            noAck: false
        };
        this.options = Object.assign({}, this.defaultOptions, options);
        this.created = this.create();
    }
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            const { exclusive, priority, durable, autoDelete, messageTtl, expires, deadLetterExchange, deadLetterRoutingKey, maxLength } = this.options;
            let queueOptions = {
                exclusive,
                durable,
                autoDelete,
                messageTtl,
                expires,
                deadLetterExchange,
                deadLetterRoutingKey,
                maxLength
            };
            if (priority !== undefined) {
                queueOptions.arguments = { 'x-max-priority': priority };
            }
            yield this.channel.assertQueue(this.name, queueOptions);
        });
    }
    subscribe(handler) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.created;
            this.handler = handler;
            let tag = yield this.channel.consume(this.name, this.onMessage.bind(this), { noAck: this.options.noAck });
            this.tag = tag;
        });
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.channel.cancel(this.tag.consumerTag);
            this.handler = null;
            this.tag = null;
        });
    }
    static destroy(channel, name) {
        return __awaiter(this, void 0, void 0, function* () {
            yield channel.deleteQueue(name);
        });
    }
    purge() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.channel.purgeQueue(this.name);
        });
    }
    onMessage(msg) {
        const ack = () => {
            if (!this.options.noAck) {
                this.channel.ack(msg);
            }
        };
        if (!msg) {
            return;
        }
        this.handler(msg, (error, reply) => { var reply_1, reply_1_1; return __awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            const { replyTo, correlationId, headers } = msg.properties;
            if (error && reply !== Queue.STOP_PROPAGATION) {
                reply = Object.assign({}, Queue.ERROR_DURING_REPLY, { error_message: error });
            }
            if (!replyTo || reply === Queue.STOP_PROPAGATION) {
                ack();
            }
            else if (reply instanceof stream_1.Readable) {
                const properties = {
                    correlationId,
                    contentType: 'application/json',
                    headers: { isStream: true, correlationId }
                };
                try {
                    let id = 0;
                    try {
                        for (reply_1 = __asyncValues(reply); reply_1_1 = yield reply_1.next(), !reply_1_1.done;) {
                            let chunk = reply_1_1.value;
                            properties.correlationId = `${correlationId}.${id++}`;
                            if (chunk instanceof Buffer)
                                chunk = chunk.toString();
                            if (headers.backpressure) {
                                let serviceResponse = yield Queue.getReply(chunk, properties, this.channel, replyTo, null, headers.timeout);
                                if (serviceResponse && serviceResponse.stopStream === Queue.STOP_STREAM_MESSAGE.stopStream) {
                                    ack();
                                    reply.destroy();
                                    logger.info(`[${correlationId}] -> Received stopStream event. Closing connection`);
                                    return;
                                }
                            }
                            else {
                                const bufferContent = encode_decode_1.encode(chunk);
                                logger.info(`[${correlationId}] -> Publishing to queue ${replyTo} ${bufferContent.byteLength} bytes`);
                                this.channel.sendToQueue(replyTo, bufferContent, properties);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (reply_1_1 && !reply_1_1.done && (_a = reply_1.return)) yield _a.call(reply_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    logger.info(`[${correlationId}] -> Publishing to queue ${replyTo} 4 bytes (null)`);
                    this.channel.sendToQueue(replyTo, encode_decode_1.encode(null), properties, ack);
                }
                catch (e) {
                    logger.error(`[${correlationId}] -> Publishing to queue ${replyTo} error ${e}`);
                    this.channel.sendToQueue(replyTo, encode_decode_1.encode(Object.assign({}, Queue.ERROR_DURING_REPLY, { error_message: e.message })), properties, ack);
                }
            }
            else {
                const bufferContent = encode_decode_1.encode(reply);
                logger.info(`[${correlationId}] -> Publishing to queue ${replyTo} ${bufferContent.byteLength} bytes`);
                this.channel.sendToQueue(replyTo, bufferContent, { correlationId, contentType: 'application/json' }, ack);
            }
        }); });
    }
    static publish(obj, properties = {}, channel, name, queue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (queue) {
                yield queue.created;
            }
            return new Promise((resolve, reject) => {
                const correlationId = properties.correlationId || uuid.v4();
                properties = Object.assign({ persistent: true, correlationId }, properties);
                const bufferContent = encode_decode_1.encode(obj, properties.contentType);
                logger.info(`[${correlationId}] -> Publishing to queue ${name} ${bufferContent.byteLength} bytes`);
                channel.sendToQueue(name, bufferContent, properties, (err, ok) => (err ? reject(err) : resolve(ok)));
            });
        });
    }
    static getReply(obj, properties, channel, name, queue, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            if (queue) {
                yield queue.created;
            }
            const reply = reply_queue_1.getReply(obj, properties, channel, (bufferContent, properties, correlationId, cb) => {
                logger.info(`[${correlationId}] -> Publishing to reply queue ${name} ${bufferContent.byteLength} bytes`);
                channel.sendToQueue(name, bufferContent, properties, cb);
            });
            if (timeout) {
                return race_until_1.raceUntil(reply, timeout, new Error('Timed out'));
            }
            else {
                return reply;
            }
        });
    }
    static bindToExchange(exchange, routingKey, channel, name, queue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (queue) {
                yield queue.created;
            }
            yield channel.bindQueue(name, exchange, routingKey);
            logger.debug(`created binding ${exchange} routingkey:${routingKey} --> queue:${name}`);
        });
    }
    static unbindFromExchange(exchange, routingKey, channel, name, queue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (queue) {
                yield queue.created;
            }
            yield channel.unbindQueue(name, exchange, routingKey);
            logger.debug(`deleted binding${exchange} routingkey:${routingKey} -X-> queue:${name}}`);
        });
    }
}
exports.default = Queue;
Queue.STOP_PROPAGATION = { stopPropagation: true };
Queue.ERROR_DURING_REPLY = { error: true, error_code: 999 };
Queue.STOP_STREAM = 'stopStream';
Queue.STOP_STREAM_MESSAGE = { stopStream: true };
//# sourceMappingURL=queue.js.map