"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const queue_1 = require("./queue");
const encode_decode_1 = require("./encode-decode");
const logger_1 = require("./logger");
const logger = logger_1.default('rabbit-queue');
let delayedQueue = {};
let delayedQueueReply;
let delayedQueueNameReply;
function createDelayQueueReply(channel, delayedQueueName) {
    return __awaiter(this, void 0, void 0, function* () {
        delayedQueueNameReply = `${delayedQueueName}_reply`;
        delayedQueueReply = new queue_1.default(channel, delayedQueueNameReply, {});
        yield delayedQueueReply.created;
        delayedQueueReply.subscribe(onMessage(channel));
    });
}
exports.createDelayQueueReply = createDelayQueueReply;
function createDelayQueue(channel, delayedQueueName) {
    return __awaiter(this, void 0, void 0, function* () {
        delayedQueue[delayedQueueName] = new queue_1.default(channel, delayedQueueName, {
            deadLetterExchange: '',
            deadLetterRoutingKey: delayedQueueNameReply
        });
        yield delayedQueue[delayedQueueName].created;
    });
}
exports.createDelayQueue = createDelayQueue;
function publishWithDelay(name, obj, headers = {}, channel, queueName) {
    return __awaiter(this, void 0, void 0, function* () {
        const { expiration = '10000' } = headers || {};
        name = `${name}_${expiration}`;
        if (!delayedQueue[name]) {
            yield createDelayQueue(channel, name);
        }
        const timestamp = new Date().getTime();
        queue_1.default.publish({ queueName, obj, timestamp }, Object.assign(Object.assign({ expiration }, headers), { contentType: 'application/json' }), channel, delayedQueue[name].name, delayedQueue[name]);
    });
}
exports.publishWithDelay = publishWithDelay;
function onMessage(channel) {
    return (msg, ack) => __awaiter(this, void 0, void 0, function* () {
        const id = msg.properties.correlationId;
        const { queueName, obj, timestamp } = encode_decode_1.decode(msg);
        const { properties } = msg;
        const _a = properties.headers, { ['x-death']: xDeath } = _a, rest = __rest(_a, ['x-death']);
        logger.debug(`[${id}] -> Received expired msg after ${xDeath[0]['original-expiration']} ms. \
Actually took ${new Date().getTime() - timestamp} ms.`);
        yield queue_1.default.publish(obj, Object.assign(Object.assign({}, properties), { headers: rest }), channel, queueName);
        ack();
    });
}
//# sourceMappingURL=delay-queue.js.map