/// <reference types="node" />
import * as amqp from 'amqplib';
import { EventEmitter } from 'events';
import { Channel } from './channel';
import Queue from './queue';
import getLogger from './logger';
export default class Rabbit extends EventEmitter {
    url: string;
    static STOP_PROPAGATION: {
        stopPropagation: boolean;
    };
    static STOP_STREAM: string;
    static INSTANCE: Rabbit;
    consumeConnection: amqp.Connection;
    publishConnection: amqp.Connection;
    consumeChannel: Channel;
    publishChannel: Channel;
    connected: Promise<any>;
    lock: Promise<void>;
    queues: {
        [s: string]: Queue;
    };
    connecting: boolean;
    prefetch: number;
    replyPattern: boolean;
    prefix: string;
    scheduledPublish: boolean;
    socketOptions: any;
    logger: ReturnType<typeof getLogger>;
    constructor(url: string, { prefetch, replyPattern, prefix, scheduledPublish, socketOptions }?: {
        prefetch?: number;
        replyPattern?: boolean;
        prefix?: string;
        scheduledPublish?: boolean;
        socketOptions?: {};
    });
    private connect;
    reconnect(): Promise<void>;
    private emitDisconnected;
    createChannel(connection: amqp.Connection): Promise<amqp.ConfirmChannel>;
    initChannel(channel: Channel, publish?: boolean): Promise<void>;
    private updateName;
    createQueue(name: string, options?: amqp.Options.AssertQueue & {
        prefix?: string;
        prefetch?: any;
    }, handler?: (msg: any, ack: (error?: any, reply?: any) => any) => any): Promise<Queue>;
    destroyQueue(name: string, prefix?: string): Promise<void>;
    subscribe(name: any, handler: (msg: any, ack: (reply: any) => any) => any, prefix?: string): Promise<void>;
    unsubscribe(name: any, prefix?: string): Promise<void>;
    publish(name: string, obj: any, headers?: amqp.Options.Publish, prefix?: string): Promise<void>;
    publishWithDelay(name: string, obj: any, properties?: amqp.Options.Publish, prefix?: string): Promise<void>;
    getReply(name: string, obj: any, properties: amqp.Options.Publish, prefix?: string, timeout?: number): Promise<any>;
    getTopicReply(topicName: string, content: any, properties: amqp.Options.Publish, prefix?: string, timeout?: number): Promise<any>;
    publishExchange(exchange: string, routingKey: string, content: any, headers: amqp.Options.Publish, prefix?: string): Promise<void>;
    publishTopic(topicName: string, content: any, headers?: amqp.Options.Publish, prefix?: string): Promise<void>;
    bindToExchange(queueName: string, exchange: string, routingKey: string, prefix?: string): Promise<void>;
    unbindFromExchange(queueName: string, exchange: any, topicName: any, prefix?: string): Promise<void>;
    bindToTopic(queueName: string, topicName: string, prefix?: string): Promise<void>;
    unbindFromTopic(queueName: string, topicName: string, prefix?: string): Promise<void>;
    close(): Promise<void>;
}
