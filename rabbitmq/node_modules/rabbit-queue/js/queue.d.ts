import * as amqp from 'amqplib';
import { Channel } from './channel';
export default class Queue {
    channel: Channel;
    name: string;
    static STOP_PROPAGATION: {
        stopPropagation: boolean;
    };
    static ERROR_DURING_REPLY: {
        error: boolean;
        error_code: number;
    };
    static STOP_STREAM: string;
    static STOP_STREAM_MESSAGE: {
        stopStream: boolean;
    };
    defaultOptions: {
        durable: boolean;
        noAck: boolean;
    };
    options: amqp.Options.AssertQueue & amqp.Options.Consume;
    created: Promise<any>;
    handler: Function;
    private tag;
    constructor(channel: Channel, name: string, options: amqp.Options.AssertQueue & amqp.Options.Consume);
    create(): Promise<void>;
    subscribe(handler: (msg: any, ack: (error?: any, reply?: any) => any) => any): Promise<void>;
    unsubscribe(): Promise<void>;
    static destroy(channel: Channel, name: string): Promise<void>;
    purge(): Promise<void>;
    onMessage(msg: amqp.Message): void;
    static publish(obj: any, properties: amqp.Options.Publish, channel: Channel, name: string, queue?: Queue): Promise<unknown>;
    static getReply(obj: any, properties: amqp.Options.Publish, channel: Channel, name: string, queue?: Queue, timeout?: number): Promise<any>;
    static bindToExchange(exchange: string, routingKey: string, channel: Channel, name: string, queue?: Queue): Promise<void>;
    static unbindFromExchange(exchange: any, routingKey: any, channel: Channel, name: string, queue?: Queue): Promise<void>;
}
