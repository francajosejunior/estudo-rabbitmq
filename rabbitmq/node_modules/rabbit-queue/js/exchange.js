"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const race_until_1 = require("race-until");
const reply_queue_1 = require("./reply-queue");
const encode_decode_1 = require("./encode-decode");
const uuid = require("uuid");
const logger_1 = require("./logger");
const logger = logger_1.default('rabbit-queue');
exports.default = {
    defaultHeaders: {
        persistent: true
    },
    publish(channel, exchange, routingKey, content, properties = {}) {
        return new Promise((resolve, reject) => {
            const correlationId = properties.correlationId || uuid.v4();
            const bufferContent = encode_decode_1.encode(content, properties.contentType);
            const exchangeHeaders = Object.assign({ correlationId }, this.defaultHeaders, properties);
            logger.info(`[${correlationId}] -> Publishing to ${exchange} ${routingKey} ${bufferContent.byteLength} bytes`);
            channel.publish(exchange, routingKey, bufferContent, exchangeHeaders, (err, ok) => {
                err ? reject(err) : resolve(ok);
            });
        });
    },
    getReply(channel, exchange, routingKey, content, properties, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            const reply = reply_queue_1.getReply(content, properties, channel, (bufferContent, headers, correlationId, cb) => {
                logger.info(`[${correlationId}] -> Publishing to reply exchange ${exchange}-${routingKey} ${bufferContent.byteLength} bytes`);
                channel.publish(exchange, routingKey, bufferContent, headers, cb);
            });
            if (timeout) {
                return race_until_1.raceUntil(reply, timeout, new Error('Timed out'));
            }
            else {
                return reply;
            }
        });
    }
};
//# sourceMappingURL=exchange.js.map